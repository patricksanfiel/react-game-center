{"version":3,"sources":["../../../../../DevStuff/MERNStack/react-hangman/src/Components/HangmanCanvas.js","../../../../../DevStuff/MERNStack/react-hangman/src/Components/HangmanSpace.js","../../../../../DevStuff/MERNStack/react-hangman/src/Components/HangmanRenderSpaces.js","../../../../../DevStuff/MERNStack/react-hangman/src/Components/HangmanSetWordInput.js","../../../../../DevStuff/MERNStack/react-hangman/src/Components/HangmanGuessLetterInput.js","../../../../../DevStuff/MERNStack/react-hangman/src/Components/HangmanInput.js","../../../../../DevStuff/MERNStack/react-hangman/src/Components/HangmanScoreboard.js","../../../../../DevStuff/MERNStack/react-hangman/src/Components/Hangman.js","../../../../../DevStuff/MERNStack/react-hangman/src/App.js","../../../../../DevStuff/MERNStack/react-hangman/src/serviceWorker.js","../../../../../DevStuff/MERNStack/react-hangman/src/index.js"],"names":["HangmanCanvas","this","updateCanvas","_this","myCanvas","document","getElementById","context","getContext","fillStyle","fillRect","strokeStyle","moveTo","lineTo","stroke","props","remainingGuesses","beginPath","arc","Math","PI","showCanvas","react_default","a","createElement","id","Component","HangmanSpace","className","spaceValue","HangmanRenderSpaces","wordToGuess","length","playerCorrectGuesses","map","letter","indexOf","Components_HangmanSpace","key","HangmanSetWordInput","onClick","event","getDogs","getCountry","getPokemon","onChange","changed","setDoneButtonClicked","HangmanGuessLetterInput","guessQuitButtonClicked","HangmanInput","toggleInput","Components_HangmanGuessLetterInput","guessLetterChanged","Components_HangmanSetWordInput","setWordChanged","setQuitButtonClicked","quitButtonClicked","HangmanScoreboard","playerIncorrectGuesses","Hangman","state","gameOn","gameWon","checkProgress","_this2","Components_HangmanScoreboard","Components_HangmanCanvas","Components_HangmanRenderSpaces","Components_HangmanInput","setGuessWord","getDogBreed","getCountryName","checkWordLength","setState","guessLetter","restartGame","_this3","axios","get","then","res","data","message","dogArray","Object","keys","range","floor","random","split","fillSpecialChars","_this4","countryArray","name","toLowerCase","_this5","results","pokemonArray","target","value","toString","console","log","alphabet","i","includes","alert","pop","join","forEach","push","isALetter","toConsumableArray","Set","resetArray","playGame","App","Components_Hangman","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RA4GeA,qMAxGPC,KAAKC,4DAILD,KAAKC,sDAIM,IAAAC,EAAAF,KACPG,EAAWC,SAASC,eAAe,kBAEvC,GAAIF,EAAU,CACV,IAAIG,EAAUH,EAASI,WAAW,MAClCD,EAAQE,UAAY,UACpBF,EAAQG,SAAS,EAAG,EAAG,IAAK,KAE5BH,EAAQI,YAAc,QACtBJ,EAAQK,OAAO,IAAK,KACpBL,EAAQM,OAAO,IAAK,KACpBN,EAAQO,SAERP,EAAQK,OAAO,IAAK,KACpBL,EAAQM,OAAO,IAAK,IACpBN,EAAQO,SAERP,EAAQK,OAAO,IAAK,IACpBL,EAAQM,OAAO,IAAK,IACpBN,EAAQO,SAERP,EAAQK,OAAO,IAAK,IACpBL,EAAQM,OAAO,IAAK,IACpBN,EAAQO,SA4DR,MARmB,MAPXX,EAAKY,MAAMC,iBAAmB,IAE9BT,EAAQK,OAAO,IAAK,IACpBL,EAAQM,OAAO,IAAK,IACpBN,EAAQO,gBAbRX,EAAKY,MAAMC,iBAAmB,IAE9BT,EAAQK,OAAO,IAAK,IACpBL,EAAQM,OAAO,IAAK,IACpBN,EAAQO,gBAbRX,EAAKY,MAAMC,iBAAmB,IAE9BT,EAAQK,OAAO,IAAK,IACpBL,EAAQM,OAAO,IAAK,IACpBN,EAAQO,gBAbRX,EAAKY,MAAMC,iBAAmB,IAE9BT,EAAQK,OAAO,IAAK,IACpBL,EAAQM,OAAO,IAAK,IACpBN,EAAQO,gBAZRX,EAAKY,MAAMC,iBAAmB,IAE9BT,EAAQK,OAAO,IAAK,IACpBL,EAAQM,OAAO,IAAK,IACpBN,EAAQO,gBAZRX,EAAKY,MAAMC,iBAAmB,IAE9BT,EAAQU,YACRV,EAAQW,IAAI,IAAK,GAAI,EAAG,EAAG,EAAIC,KAAKC,IACpCb,EAAQO,8CA2DpB,OAA8B,IAA1Bb,KAAKc,MAAMM,WACJC,EAAAC,EAAAC,cAAA,UAAQC,GAAG,mBAEXH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,wBArGFC,cCMbC,EANM,SAACZ,GAClB,OACIO,EAAAC,EAAAC,cAAA,QAAMI,UAAU,2BAA2Bb,EAAMc,aC4B1CC,EA7Ba,SAACf,GACzB,GAAIA,EAAMgB,YAAYC,OAAO,EAAG,CAC5B,IAAID,EAAchB,EAAMgB,YACpBE,EAAuBlB,EAAMkB,qBAC7BR,EAAK,EACT,OAAOM,EAAYG,IAAI,SAAAC,GAIrB,OAHAV,IAGIQ,EAAqBG,QAAQD,IAAW,GAAgB,MAAXA,EACxCb,EAAAC,EAAAC,cAACa,EAAD,CAAcR,WAAYM,EAAQG,IAAKb,IAO5CH,EAAAC,EAAAC,cAACa,EAAD,CAAcR,WAAW,IAAIS,IAAKb,MAQxC,OAAOH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,kCAAkCG,UAAU,cAAlD,yFCFAW,EAxBa,SAACxB,GACzB,OACIO,EAAAC,EAAAC,cAAA,OAAKC,GAAG,kBAAkBG,UAAU,OAChCN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,sBAAsBG,UAAY,SACtCN,EAAAC,EAAAC,cAAA,QAAMC,GAAG,yBAAyBG,UAAU,gDAA5C,qBACAN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,2BACJH,EAAAC,EAAAC,cAAA,UAAQgB,QAAS,SAACC,GAAD,OAAW1B,EAAM2B,QAAQD,IAAQb,UAAU,uDAA5D,oBACAN,EAAAC,EAAAC,cAAA,UAAQgB,QAAS,SAACC,GAAD,OAAW1B,EAAM4B,WAAWF,IAAQb,UAAU,uDAA/D,kBACAN,EAAAC,EAAAC,cAAA,UAAQgB,QAAS,SAACC,GAAD,OAAU1B,EAAM6B,WAAWH,IAAQb,UAAU,uDAA9D,oBAGRN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBAAiBG,UAAU,SAC/BN,EAAAC,EAAAC,cAAA,QAAMC,GAAG,kBAAkBG,UAAU,2CAArC,4CACAN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,mBACRH,EAAAC,EAAAC,cAAA,SAAOqB,SAAU,SAACJ,GAAD,OAAW1B,EAAM+B,QAAQL,IAAQhB,GAAG,iBAAiBG,UAAU,iCAChFN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,qBACXN,EAAAC,EAAAC,cAAA,UAAQC,GAAG,gBAAgBG,UAAU,2EAA2EY,QAAU,SAACC,GAAD,OAAU1B,EAAMgC,qBAAqBN,KAA/J,aCFLO,EAdiB,SAAEjC,GAC9B,OACIO,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYG,UAAU,sCAC1BN,EAAAC,EAAAC,cAAA,QAAMI,UAAU,sCAAsCH,GAAG,uBAAzD,2BACAH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,mBACJH,EAAAC,EAAAC,cAAA,SAAOqB,SAAa,SAACJ,GAAD,OAAW1B,EAAM+B,QAAQL,IAAQhB,GAAG,qBAAqBG,UAAU,iCACvFN,EAAAC,EAAAC,cAAA,UAAQC,GAAG,oBAAoBG,UAAU,+EAA+EY,QAAY,SAAAC,GAAK,OAAI1B,EAAMkC,uBAAuBR,KAA1K,WCkBDS,EAtBM,SAACnC,GACd,OAAKA,EAAMoC,YAaH7B,EAAAC,EAAAC,cAAC4B,EAAD,CACIN,QAAU,SAAAL,GAAK,OAAI1B,EAAMsC,mBAAmBZ,IAC5CQ,uBAAyB,SAAAR,GAAK,OAAI1B,EAAMkC,uBAAuBR,MAbnEnB,EAAAC,EAAAC,cAAC8B,EAAD,CACIR,QAAU,SAAAL,GAAK,OAAI1B,EAAMwC,eAAed,IACxCM,qBAAuB,SAAAN,GAAK,OAAI1B,EAAMgC,qBAAqBN,IAC3De,qBAAuB,SAAAf,GAAK,OAAI1B,EAAM0C,kBAAkBhB,IACxDC,QAAS,SAAAD,GAAK,OAAI1B,EAAM2B,QAAQD,IAChCE,WAAY,SAAAF,GAAK,OAAI1B,EAAM4B,WAAWF,IACtCG,WAAY,SAAAH,GAAK,OAAI1B,EAAM6B,WAAWH,OCF3CiB,EATW,SAAC3C,GACvB,OACIO,EAAAC,EAAAC,cAAA,OAAKC,GAAG,qBAAqBG,UAAU,OACnCN,EAAAC,EAAAC,cAAA,QAAMC,GAAG,4BAA4BG,UAAU,6CAA/C,sBAA+Gb,EAAM4C,wBACrHrC,EAAAC,EAAAC,cAAA,QAAMC,GAAG,4BAA4BG,UAAU,6CAA/C,sBAA+Gb,EAAMC,oCCkTlH4C,6MA/SbC,MAAQ,CACN9B,YAAa,GACbE,qBAAsB,GACtB0B,uBAAwB,GACxB3C,iBAAkB,EAClB8C,QAAQ,EACRC,SAAS,EACT1C,YAAY,EACZ8B,aAAa,uFAIblD,KAAK+D,mDAGI,IAAAC,EAAAhE,KACT,OAAIA,KAAK4D,MAAMC,OAEXxC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,uBACbN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,uBACNH,EAAAC,EAAAC,cAAC0C,EAAD,CACEP,uBAAwB1D,KAAK4D,MAAMF,uBACnC3C,iBAAkBf,KAAK4D,MAAM7C,mBAE/BM,EAAAC,EAAAC,cAAC2C,EAAD,CACEnD,iBAAkBf,KAAK4D,MAAM7C,iBAC7B8C,OAAQ7D,KAAK4D,MAAMC,OACnBzC,WAAYpB,KAAK4D,MAAMxC,cAG3BC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,sBACNH,EAAAC,EAAAC,cAAC4C,EAAD,CACErC,YAAa9B,KAAK4D,MAAM9B,YACxBE,qBAAsBhC,KAAK4D,MAAM5B,wBAGrCX,EAAAC,EAAAC,cAAC6C,EAAD,CACEd,eAAgB,SAAAd,GAAK,OAAIwB,EAAKK,aAAa7B,IAC3CC,QAAS,SAAAD,GAAK,OAAIwB,EAAKM,YAAY9B,IACnCE,WAAY,SAAAF,GAAK,OAAIwB,EAAKO,eAAe/B,IACzCG,WAAY,SAAAH,GAAK,OAAIwB,EAAKrB,WAAWH,IACrCM,qBAAsB,SAAAN,GACpBwB,EAAKd,YAAYV,GACjBwB,EAAKQ,gBAAgBhC,GACrBwB,EAAKS,SAAS,CAAErD,YAAY,KAE9B4B,uBAAwB,SAAAR,GACtBwB,EAAKS,SAAS,CAAEZ,QAAQ,EAAOzC,YAAY,KAE7C8B,YAAalD,KAAK4D,MAAMV,YACxBE,mBAAoB,SAAAZ,GAAK,OAAIwB,EAAKU,YAAYlC,OAI3CxC,KAAK4D,MAAME,QAElBzC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,uBACbN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBAAiBG,UAAU,OACjCN,EAAAC,EAAAC,cAAA,MAAII,UAAU,oBAAoBH,GAAG,mBAArC,YAIFH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,kBAAkBG,UAAU,OAClCN,EAAAC,EAAAC,cAAA,UACEgB,QAAS,SAAAC,GAAK,OAAIwB,EAAKW,YAAYnC,IACnCb,UAAU,8DACVH,GAAG,sBAHL,gBAYJH,EAAAC,EAAAC,cAAA,OAAKI,UAAU,sBAAsBH,GAAG,oBACtCH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,mBAAmBG,UAAU,OACnCN,EAAAC,EAAAC,cAAA,MAAIC,GAAG,iBAAiBG,UAAU,eAAlC,cAIFN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,QAAMC,GAAG,wBAAwBG,UAAU,qBAA3C,gBACeN,EAAAC,EAAAC,cAAA,cAASvB,KAAK4D,MAAM9B,eAGrCT,EAAAC,EAAAC,cAAA,OAAKC,GAAG,uBAAuBG,UAAU,OACvCN,EAAAC,EAAAC,cAAA,UACEgB,QAAS,SAAAC,GAAK,OAAIwB,EAAKW,YAAYnC,IACnChB,GAAG,mBACHG,UAAU,2BAHZ,qDAcEa,GACV,IAAIU,GAAelD,KAAK4D,MAAMV,YAC1BlD,KAAK4D,MAAMV,YACblD,KAAK2E,cAEL3E,KAAKyE,SAAS,CAAEvB,YAAaA,0CAOnB,IAAA0B,EAAA5E,KACZA,KAAKkD,cACL2B,IACGC,IAAI,uCACJC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,UAClBH,KAAK,SAAAG,GACJ,IAAIC,EAAWC,OAAOC,KAAKH,GACvBI,EAAQH,EAASpD,OAAS,EAE1BD,EAAcqD,EADAjE,KAAKqE,MAAMrE,KAAKsE,SAAWF,IACLG,MAAM,IAC1CzD,EAAuB4C,EAAKhB,MAAM5B,qBACtC4C,EAAKc,iBAAiB5D,EAAaE,GACnC4C,EAAKH,SAAS,CACZ3C,YAAaA,+CAMJ,IAAA6D,EAAA3F,KACfA,KAAKkD,cACL2B,IACGC,IAAI,wCACJC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,KAAK,SAAAE,GACJ,IAAIW,EAAeX,EACfK,EAAQM,EAAa7D,OAErBD,EAAc8D,EADA1E,KAAKqE,MAAMrE,KAAKsE,SAAWF,IAEzCtD,EAAuB2D,EAAK/B,MAAM5B,qBACtCF,EAAcA,EAAY+D,KAAKC,cAAcL,MAAM,IACnDE,EAAKD,iBAAiB5D,EAAaE,GACnC2D,EAAKlB,SAAS,CACZ3C,YAAaA,EACbE,qBAAsBA,2CAMjB,IAAA+D,EAAA/F,KACXA,KAAKkD,cACL2B,IACGC,IAAI,8CACJC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKe,UAClBjB,KAAK,SAAAiB,GACJ,IAAIC,EAAeD,EACfV,EAAQW,EAAalE,OAErBD,EAAcmE,EADA/E,KAAKqE,MAAMrE,KAAKsE,SAAWF,IAEzCtD,EAAuB+D,EAAKnC,MAAM5B,qBACtCF,EAAcA,EAAY+D,KAAKC,cAAcL,MAAM,IACnDM,EAAKL,iBAAiB5D,EAAaE,GACnC+D,EAAKtB,SAAS,CACZ3C,YAAaA,EACbE,qBAAsBA,2CAMjBQ,GACX,IAAIV,EAAcU,EAAM0D,OAAOC,MAC5BC,WACAN,cACAL,MAAM,IACTY,QAAQC,IAAI9D,EAAM0D,OAAOC,MAAMrE,EAAYC,OAAS,IAGpD,IAFA,IAAIwE,EAAW,8BAA8Bd,MAAM,IAC/CzD,EAAuBhC,KAAK4D,MAAM5B,qBAC7BwE,EAAI,EAAGA,EAAI1E,EAAYC,OAAQyE,IACtC,IAAKD,EAASE,SAAS3E,EAAY0E,IAIjC,OAHAE,MAAM,6BACN5E,EAAY6E,MACZnE,EAAM0D,OAAOC,MAAQrE,EAAY8E,KAAK,IAChB,KAG1B5G,KAAK0F,iBAAiB5D,EAAaE,GAC/BF,GAAeA,EAAYC,QAAU,EACvC/B,KAAKyE,SAAS,CACZ3C,YAAaA,EACbE,qBAAsBA,IAGxB0E,MAAM,sEAIO5E,EAAaE,GAC5B,IAAIuE,EAAW,6BAA6Bd,MAAM,IAClD3D,EAAY+E,QAAQ,SAAA3E,GACdqE,EAASE,SAASvE,IACpBF,EAAqB8E,KAAK5E,+CAQH,IADTlC,KAAK4D,MAAM9B,YACbC,QACd/B,KAAKyE,SAAS,CAAEvB,aAAa,wCAKrBV,GACV,IAAIN,EAASM,EAAM0D,OAAOC,MAAMC,WAAWN,cAEvCiB,EADW,6BAA6BtB,MAAM,IACzBgB,SAASvE,GAC9BJ,EAAc9B,KAAK4D,MAAM9B,YACzBE,EAAoBoD,OAAA4B,EAAA,EAAA5B,CAAOpF,KAAK4D,MAAM5B,sBACtC0B,EAAsB0B,OAAA4B,EAAA,EAAA5B,CAAOpF,KAAK4D,MAAMF,wBACxC3C,EAAmBf,KAAK4D,MAAM7C,iBAGlC,GAAKgG,EAEE,GAAe,MAAX7E,EACTF,EAAqB8E,KAAK5E,QACrB,IACqC,IAA1CF,EAAqBG,QAAQD,IAC7BJ,EAAYK,QAAQD,IAAW,EAC/B,CACA,IAAK,IAAIsE,EAAI,EAAGA,EAAI1E,EAAYC,OAAQyE,IAClC1E,EAAY0E,KAAOtE,GACrBF,EAAqB8E,KAAK5E,GAG9BlC,KAAKyE,SAAS,CAAEzC,qBAAsBA,SAKM,IAA5C0B,EAAuBvB,QAAQD,KACW,IAA1CF,EAAqBG,QAAQD,KAE7BnB,GAAoB,EACpB2C,EAAuBoD,KAAK5E,GAC5BlC,KAAKyE,SAAS,CACZf,uBAAwBA,EACxB3C,iBAAkBA,UAxBpB2F,MAAM,6BA4BRlE,EAAM0D,OAAOC,MAAQ,6CAKrB,IAAIpF,EAAmBf,KAAK4D,MAAM7C,iBAC9B+C,EAAU9D,KAAK4D,MAAME,QACrBhC,EAAc9B,KAAK4D,MAAM9B,YAC7BA,EAAWsD,OAAA4B,EAAA,EAAA5B,CAAO,IAAI6B,IAAInF,IAC1B,IAAIE,EAAuBhC,KAAK4D,MAAM5B,qBACtCA,EAAoBoD,OAAA4B,EAAA,EAAA5B,CAAO,IAAI6B,IAAIjF,IAEjCF,EAAYC,SAAWC,EAAqBD,QAC5CD,EAAYC,OAAS,IACT,IAAZ+B,GAEAA,GAAU,EACV9D,KAAKyE,SAAS,CAAE1D,iBAAkB,EAAG8C,QAAQ,EAAOC,QAASA,KACpD/C,EAAmB,GAC5Bf,KAAKyE,SAAS,CAAE1D,iBAAkB,EAAG8C,QAAQ,wCAKrCrB,GACV,IAAI0E,EAAa,GACjBlH,KAAKyE,SAAS,CACZ3C,YAAaoF,EACblF,qBAAsBkF,EACtBxD,uBAAwBwD,EACxBrD,QAAQ,EACRC,SAAS,EACTZ,aAAa,EACb9B,YAAY,EACZL,iBAAkB,qCAKpB,OAAOM,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aAAa3B,KAAKmH,mBA5StB1F,aCMP2F,0LARX,OACE/F,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAC8F,EAAD,cAJU5F,cCME6F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOvG,EAAAC,EAAAC,cAACsG,EAAD,MAASzH,SAASC,eAAe,SDmH3C,kBAAmByH,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.93d5a18d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass HangmanCanvas extends Component {\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n// Every time a letter is added to \"Incorrect Guesses\", the \"Remaining Guesses Counter is decreased by one\"\n// Using the \"remaining guesses\" value and checking it against the if statements, each body part is revealed \n    updateCanvas() {\n        let myCanvas = document.getElementById(\"hangman-canvas\");\n\n        if (myCanvas) {\n            let context = myCanvas.getContext(\"2d\");\n            context.fillStyle = \"#d8a200\";\n            context.fillRect(0, 0, 500, 250);\n            // Gallows Floor\n            context.strokeStyle = \"white\";\n            context.moveTo(125, 105);\n            context.lineTo(175, 105);\n            context.stroke();\n            // Gallows Pole\n            context.moveTo(135, 105);\n            context.lineTo(135, 40);\n            context.stroke();\n            // Gallows Arm\n            context.moveTo(125, 45);\n            context.lineTo(160, 45);\n            context.stroke();\n            // Rope\n            context.moveTo(150, 45);\n            context.lineTo(150, 65);\n            context.stroke();\n            let hangmanHead = () => {\n                if (this.props.remainingGuesses < 6) {\n                    // Head\n                    context.beginPath();\n                    context.arc(150, 70, 5, 0, 2 * Math.PI);\n                    context.stroke();\n                }\n            };\n            let hangmanTorso = () => {\n                if (this.props.remainingGuesses < 5) {\n                    // Torso\n                    context.moveTo(150, 75);\n                    context.lineTo(150, 90);\n                    context.stroke();\n                }\n            };\n            let hangmanLeftArm = () => {\n                if (this.props.remainingGuesses < 4) {\n                    // Left Arm\n                    context.moveTo(150, 75);\n                    context.lineTo(142, 82);\n                    context.stroke();\n                }\n            };\n\n            let hangmanRightArm = () => {\n                if (this.props.remainingGuesses < 3) {\n                    // Right Arm\n                    context.moveTo(150, 75);\n                    context.lineTo(158, 82);\n                    context.stroke();\n                }\n            };\n\n            let hangmanLeftLeg = () => {\n                if (this.props.remainingGuesses < 2) {\n                    // Left Leg\n                    context.moveTo(150, 90);\n                    context.lineTo(142, 97);\n                    context.stroke();\n                }\n            };\n\n            let hangmanRightLeg = () => {\n                if (this.props.remainingGuesses < 1) {\n                    // Right Leg\n                    context.moveTo(150, 90);\n                    context.lineTo(158, 97);\n                    context.stroke();\n                }\n            };\n            let hangmanArray = [\n                hangmanRightLeg(),\n                hangmanLeftLeg(),\n                hangmanRightArm(),\n                hangmanLeftArm(),\n                hangmanTorso(),\n                hangmanHead()\n            ];\n            return hangmanArray;\n        }\n    }\n\n    render() {\n        if (this.props.showCanvas === true) {\n            return <canvas id=\"hangman-canvas\" />;\n        } else {\n            return <canvas id=\"empty-canvas\" />;\n        }\n    }\n}\n\nexport default HangmanCanvas;\n","import React from 'react';\n\nconst HangmanSpace = (props) => {\n    return(\n        <span className=\"letter-space white-text\">{props.spaceValue}</span>\n    )\n}\n\nexport default HangmanSpace;","import React from 'react';\nimport HangmanSpace from './HangmanSpace';\n\nconst HangmanRenderSpaces = (props) => {\n    if (props.wordToGuess.length>1) {\n        let wordToGuess = props.wordToGuess;\n        let playerCorrectGuesses = props.playerCorrectGuesses;\n        let id = 0;\n        return wordToGuess.map(letter => {\n          id++;\n          //If the element at the current position matches a letter in the playerCorrectGuesses\n          //array, the element's value will be rendered in a HangmanSpace component in this position.\n          if (playerCorrectGuesses.indexOf(letter) > -1 || letter === \" \") {\n            return <HangmanSpace spaceValue={letter} key={id} />;\n          }\n          // If the element at the current position does not match any letter in the\n          // playerCorrectGuesses array(meaning it has not yet been guessed by the user)\n          // A span element containing a blank space will be rendered in its place\n          else {\n            return (\n              <HangmanSpace spaceValue=\"_\" key={id} />\n            );\n          }\n        });\n      }\n      // If a word to be guessed has not yet been entered by a user, they will be prompted to\n      // Choose or enter one\n      else {\n        return <p id=\"render-spaces-enter-word-prompt\" className=\"white-text\">Please choose a category or enter a word or phrase consisting of two or more letters</p>;\n      }\n}\n\nexport default HangmanRenderSpaces;","import React from 'react';\n\nconst HangmanSetWordInput = (props) => {\n    return(\n        <div id=\"select-word-div\" className=\"row\">\n            <div id=\"choose-category-div\" className = \"col-6\">\n                <span id=\"choose-category-header\" className=\"select-word-subheader text yellow-box-shadow\">Choose a category</span>\n                <div id=\"choose-category-buttons\">\n                    <button onClick={(event) => props.getDogs(event)} className=\"category-button text black-border yellow-box-shadow\">Random Dog Breed</button>\n                    <button onClick={(event) => props.getCountry(event)} className=\"category-button text black-border yellow-box-shadow\">Random Country</button>\n                    <button onClick={(event)=> props.getPokemon(event)} className=\"category-button text black-border yellow-box-shadow\">Random Pokemon</button>\n                </div>\n            </div>\n            <div id=\"enter-word-div\" className=\"col-6\">\n                <span id=\"set-word-header\" className=\"select-word-subheader text black-border\">Enter a word to guess using only letters</span>\n                <div id=\"enter-word-body\">\n                <input onChange={(event) => props.changed(event)} id=\"set-word-input\" className=\"white-text yellow-box-shadow\"/>\n                <div className=\"input-buttons-div\">\n                    <button id=\"set-word-done\" className=\"set-word-button hangman-input-button text black-border yellow-box-shadow\" onClick={ (event)=> props.setDoneButtonClicked(event)}>Done</button>\n                </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HangmanSetWordInput;","import React from 'react';\n\nconst HangmanGuessLetterInput = ( props ) => {\n    return(\n        <div id=\"guess-div\" className=\"row black-border yellow-box-shadow\">\n            <span className=\"text black-border yellow-box-shadow\" id=\"guess-letter-prompt\">Type a letter to guess:</span>\n            <div id=\"guess-div-input\">\n                <input onChange = { (event) => props.changed(event)} id=\"guess-letter-input\" className=\"white-text yellow-box-shadow\"/>\n                <button id=\"guess-letter-quit\" className=\"guess-letter-button hangman-input-button text black-border yellow-box-shadow\" onClick = { event => props.guessQuitButtonClicked(event)}>\n                    Quit\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default HangmanGuessLetterInput;","import React from 'react';\nimport HangmanSetWordInput from './HangmanSetWordInput';\nimport HangmanGuessLetterInput from './HangmanGuessLetterInput';\n\nconst HangmanInput = (props) => {\n        if (!props.toggleInput){\n            return(\n                <HangmanSetWordInput \n                    changed={ event => props.setWordChanged(event) }\n                    setDoneButtonClicked={ event => props.setDoneButtonClicked(event) }\n                    setQuitButtonClicked={ event => props.quitButtonClicked(event) }\n                    getDogs={event => props.getDogs(event)}\n                    getCountry={event => props.getCountry(event)}\n                    getPokemon={event => props.getPokemon(event)}\n                />\n            )\n        } else {\n            return(\n                <HangmanGuessLetterInput \n                    changed={ event => props.guessLetterChanged(event) }\n                    guessQuitButtonClicked={ event => props.guessQuitButtonClicked(event) }\n                />\n            )\n        }\n}\n\nexport default HangmanInput;","import React from 'react';\n\nconst HangmanScoreboard = (props) => {\n    return(\n        <div id=\"hangman-scoreboard\" className=\"row\">\n            <span id=\"incorrect-guesses-display\" className=\"text col-6 black-border yellow-box-shadow\">Incorrect guesses: {props.playerIncorrectGuesses}</span>\n            <span id=\"remaining-guesses-display\" className=\"text col-6 black-border yellow-box-shadow\">Remaining Guesses: {props.remainingGuesses}</span>\n        </div>\n    )\n}\n\nexport default HangmanScoreboard;","import React, { Component } from \"react\";\nimport \"../assets/stylesheets/Hangman.css\";\nimport HangmanCanvas from \"./HangmanCanvas\";\nimport HangmanRenderSpaces from \"./HangmanRenderSpaces\";\nimport HangmanInput from \"./HangmanInput\";\nimport HangmanScoreboard from \"./HangmanScoreboard\";\nimport axios from \"axios\";\n\nclass Hangman extends Component {\n  state = {\n    wordToGuess: [],\n    playerCorrectGuesses: [],\n    playerIncorrectGuesses: [],\n    remainingGuesses: 6,\n    gameOn: true,\n    gameWon: false,\n    showCanvas: true,\n    toggleInput: false\n  };\n\n  componentDidUpdate() {\n    this.checkProgress();\n  }\n\n  playGame() {\n    if (this.state.gameOn) {\n      return (\n        <div className=\"hangman-overlay-div\">\n          <div id=\"player-feedback-div\">\n            <HangmanScoreboard\n              playerIncorrectGuesses={this.state.playerIncorrectGuesses}\n              remainingGuesses={this.state.remainingGuesses}\n            />\n            <HangmanCanvas\n              remainingGuesses={this.state.remainingGuesses}\n              gameOn={this.state.gameOn}\n              showCanvas={this.state.showCanvas}\n            />\n          </div>\n          <div id=\"display-guess-word\">\n            <HangmanRenderSpaces\n              wordToGuess={this.state.wordToGuess}\n              playerCorrectGuesses={this.state.playerCorrectGuesses}\n            />\n          </div>\n          <HangmanInput\n            setWordChanged={event => this.setGuessWord(event)}\n            getDogs={event => this.getDogBreed(event)}\n            getCountry={event => this.getCountryName(event)}\n            getPokemon={event => this.getPokemon(event)}\n            setDoneButtonClicked={event => {\n              this.toggleInput(event);\n              this.checkWordLength(event);\n              this.setState({ showCanvas: true });\n            }}\n            guessQuitButtonClicked={event => {\n              this.setState({ gameOn: false, showCanvas: false });\n            }}\n            toggleInput={this.state.toggleInput}\n            guessLetterChanged={event => this.guessLetter(event)}\n          />\n        </div>\n      );\n    } else if (this.state.gameWon) {\n      return (\n        <div className=\"hangman-overlay-div\">\n          <div id=\"you-win-header\" className=\"row\">\n            <h1 className=\"col-12 white-text\" id=\"you-win-display\">\n              You win\n            </h1>\n          </div>\n          <div id=\"you-win-buttons\" className=\"row\">\n            <button\n              onClick={event => this.restartGame(event)}\n              className=\"text col-3 play-again-button black-border yellow-box-shadow\"\n              id=\"you-win-play-again\"\n            >\n              Play Again\n            </button>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"hangman-overlay-div\" id=\"game-over-screen\">\n          <div id=\"game-over-header\" className=\"row\">\n            <h1 id=\"game-over-text\" className=\"col-12 text\">\n              Game Over\n            </h1>\n          </div>\n          <div className=\"row\">\n            <span id=\"game-over-word-reveal\" className=\"col-12 white-text\">\n              The word was <strong>{this.state.wordToGuess}</strong>\n            </span>\n          </div>\n          <div id=\"game-over-button-div\" className=\"row\">\n            <button\n              onClick={event => this.restartGame(event)}\n              id=\"game-over-button\"\n              className=\"col-3 text black-border\"\n            >\n              Play Again?\n            </button>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  // Toggles between the HangmanSetWordInput and the HangmanGuessLetterInput components\n  toggleInput(event) {\n    let toggleInput = !this.state.toggleInput;\n    if (this.state.toggleInput) {\n      this.restartGame();\n    } else {\n      this.setState({ toggleInput: toggleInput });\n    }\n  }\n\n  // Pulling guess words from API\n\n  // \"Random Dog Breed\" button\n  getDogBreed() {\n    this.toggleInput();\n    axios\n      .get(\"https://dog.ceo/api/breeds/list/all\")\n      .then(res => res.data)\n      .then(data => data.message)\n      .then(message => {\n        let dogArray = Object.keys(message);\n        let range = dogArray.length - 1;\n        let randomIndex = Math.floor(Math.random() * range);\n        let wordToGuess = dogArray[randomIndex].split(\"\");\n        let playerCorrectGuesses = this.state.playerCorrectGuesses;\n        this.fillSpecialChars(wordToGuess, playerCorrectGuesses)\n        this.setState({\n          wordToGuess: wordToGuess\n        });\n      });\n  }\n\n  // \"Random Country\" button\n  getCountryName() {\n    this.toggleInput();\n    axios\n      .get(\"https://restcountries.eu/rest/v2/all\")\n      .then(res => res.data)\n      .then(data => {\n        let countryArray = data;\n        let range = countryArray.length;\n        let randomIndex = Math.floor(Math.random() * range);\n        let wordToGuess = countryArray[randomIndex];\n        let playerCorrectGuesses = this.state.playerCorrectGuesses;\n        wordToGuess = wordToGuess.name.toLowerCase().split(\"\");\n        this.fillSpecialChars(wordToGuess, playerCorrectGuesses)\n        this.setState({\n          wordToGuess: wordToGuess,\n          playerCorrectGuesses: playerCorrectGuesses\n        });\n      });\n  }\n\n  // \"Random Pokemon\" button\n  getPokemon() {\n    this.toggleInput();\n    axios\n      .get(\"https://pokeapi.co/api/v2/pokemon-species/\")\n      .then(res => res.data)\n      .then(data => data.results)\n      .then(results => {\n        let pokemonArray = results;\n        let range = pokemonArray.length;\n        let randomIndex = Math.floor(Math.random() * range);\n        let wordToGuess = pokemonArray[randomIndex];\n        let playerCorrectGuesses = this.state.playerCorrectGuesses;\n        wordToGuess = wordToGuess.name.toLowerCase().split(\"\");\n        this.fillSpecialChars(wordToGuess, playerCorrectGuesses)\n        this.setState({\n          wordToGuess: wordToGuess,\n          playerCorrectGuesses: playerCorrectGuesses\n        });\n      });\n  }\n\n  // Runs every time a user enters a character into the HangmanGuessLetterInput input element\n  setGuessWord(event) {\n    let wordToGuess = event.target.value\n      .toString()\n      .toLowerCase()\n      .split(\"\");\n    console.log(event.target.value[wordToGuess.length - 1]);\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz \".split(\"\");\n    let playerCorrectGuesses = this.state.playerCorrectGuesses;\n    for (let i = 0; i < wordToGuess.length; i++) {\n      if (!alphabet.includes(wordToGuess[i])) {\n        alert(\"Please enter letters only\");\n        wordToGuess.pop();\n        event.target.value = wordToGuess.join(\"\");\n        return (wordToGuess = null);\n      }\n    }\n    this.fillSpecialChars(wordToGuess, playerCorrectGuesses)\n    if (wordToGuess && wordToGuess.length >= 1) {\n      this.setState({\n        wordToGuess: wordToGuess,\n        playerCorrectGuesses: playerCorrectGuesses\n      });\n    } else {\n      alert(\"Please only enter letters\");\n    }\n  }\n\n  fillSpecialChars(wordToGuess, playerCorrectGuesses){\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n    wordToGuess.forEach(letter => {\n      if(!alphabet.includes(letter)){\n        playerCorrectGuesses.push(letter)\n      }\n    })\n  }\n\n  // Runs when a user enters a word into the HangmanSetWordInput input element. Minimum length of 2\n  checkWordLength() {\n    let wordToGuess = this.state.wordToGuess;\n    if (wordToGuess.length === 1) {\n      this.setState({ toggleInput: false });\n    }\n  }\n\n  // Everytime a user enters a letter into the HangmanGuessLetterInput input, this method is triggered\n  guessLetter(event) {\n    let letter = event.target.value.toString().toLowerCase();\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n    let isALetter = alphabet.includes(letter);\n    let wordToGuess = this.state.wordToGuess;\n    let playerCorrectGuesses = [...this.state.playerCorrectGuesses];\n    let playerIncorrectGuesses = [...this.state.playerIncorrectGuesses];\n    let remainingGuesses = this.state.remainingGuesses;\n    // If the current guess is not included in the array of the player's past correct guesses and\n    // is included in the array of the word to be guessed, add the current guess to the array of correct guesses\n    if (!isALetter) {\n      alert(\"Please only enter letters\");\n    } else if (letter === \" \") {\n      playerCorrectGuesses.push(letter);\n    } else if (\n      playerCorrectGuesses.indexOf(letter) === -1 &&\n      wordToGuess.indexOf(letter) > -1\n    ) {\n      for (let i = 0; i < wordToGuess.length; i++) {\n        if (wordToGuess[i] === letter) {\n          playerCorrectGuesses.push(letter);\n        }\n      }\n      this.setState({ playerCorrectGuesses: playerCorrectGuesses });\n    }\n    // Otherwise, the remainingGuesses counter will be decreased by one and the guess will be\n    // added to an array of incorrect guesses\n    else if (\n      playerIncorrectGuesses.indexOf(letter) === -1 &&\n      playerCorrectGuesses.indexOf(letter) === -1\n    ) {\n      remainingGuesses -= 1;\n      playerIncorrectGuesses.push(letter);\n      this.setState({\n        playerIncorrectGuesses: playerIncorrectGuesses,\n        remainingGuesses: remainingGuesses\n      });\n    }\n    // After each input event, the input element's value is reset to null\n    event.target.value = null;\n  }\n\n  // Runs every time the Hangman component updates\n  checkProgress() {\n    let remainingGuesses = this.state.remainingGuesses;\n    let gameWon = this.state.gameWon;\n    let wordToGuess = this.state.wordToGuess;\n    wordToGuess = [...new Set(wordToGuess)];\n    let playerCorrectGuesses = this.state.playerCorrectGuesses;\n    playerCorrectGuesses = [...new Set(playerCorrectGuesses)];\n    if (\n      wordToGuess.length === playerCorrectGuesses.length &&\n      wordToGuess.length > 1 &&\n      gameWon === false\n    ) {\n      gameWon = true;\n      this.setState({ remainingGuesses: 6, gameOn: false, gameWon: gameWon });\n    } else if (remainingGuesses < 1) {\n      this.setState({ remainingGuesses: 6, gameOn: false });\n    }\n  }\n\n  // Resets all state properties to their default values. Triggered by the play again button in the playGame method\n  restartGame(event) {\n    let resetArray = [];\n    this.setState({\n      wordToGuess: resetArray,\n      playerCorrectGuesses: resetArray,\n      playerIncorrectGuesses: resetArray,\n      gameOn: true,\n      gameWon: false,\n      toggleInput: false,\n      showCanvas: true,\n      remainingGuesses: 6\n    });\n  }\n\n  render() {\n    return <div className=\"container\">{this.playGame()}</div>;\n  }\n}\n\nexport default Hangman;\n","import React, { Component } from 'react';\nimport Hangman from './Components/Hangman';\nimport './assets/stylesheets/App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Hangman/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}